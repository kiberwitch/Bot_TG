import logging
import asyncpg
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
BOT_TOKEN = "–≤–∞—à —Ç–æ–∫–µ–Ω"
START_IMAGE_URL = "https://i.postimg.cc/TYyS5w9n/Flux-Dev-Create-a-captivating-book-cover-for-ITAYTSORSING-feat-1.jpg"
DB_CONFIG = {
    "user": "",
    "password": "",  
    "database": "",
    "host": "",
    "port": ,
}

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
db_pool: asyncpg.pool.Pool = None

# ================== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–ê–ó–ï –î–ê–ù–ù–´–• ==================

async def create_db_pool():
    return await asyncpg.create_pool(
        **DB_CONFIG,
        min_size=1,
        max_size=10,
        max_inactive_connection_lifetime=60,
        timeout=30
    )

async def init_db(pool: asyncpg.pool.Pool):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    async with pool.acquire() as conn:
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                username VARCHAR(100),
                full_name VARCHAR(200) NOT NULL,
                registration_date TIMESTAMP DEFAULT NOW(),
                last_activity TIMESTAMP DEFAULT NOW()
            )
        ''')
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS services (
                service_id SERIAL PRIMARY KEY,
                name VARCHAR(100) NOT NULL,
                description TEXT
            )
        ''')
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS service_options (
                option_id SERIAL PRIMARY KEY,
                service_id INTEGER REFERENCES services(service_id) ON DELETE CASCADE,
                name VARCHAR(100) NOT NULL,
                description TEXT,
                price VARCHAR(100)
            )
        ''')
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS requests (
                request_id SERIAL PRIMARY KEY,
                user_id BIGINT REFERENCES users(user_id) ON DELETE CASCADE,
                request_text TEXT NOT NULL,
                request_date TIMESTAMP DEFAULT NOW(),
                status VARCHAR(50) DEFAULT 'new',
                service_option_id INTEGER REFERENCES service_options(option_id) ON DELETE SET NULL
            )
        ''')
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS faq (
                faq_id SERIAL PRIMARY KEY,
                question VARCHAR(200) NOT NULL,
                answer TEXT NOT NULL
            )
        ''')

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –ø—É—Å—Ç—ã–µ
        if await conn.fetchval("SELECT COUNT(*) FROM services") == 0:
            await init_services_data(conn)
        if await conn.fetchval("SELECT COUNT(*) FROM faq") == 0:
            await init_faq_data(conn)

async def init_services_data(conn):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Å–ª—É–≥–∞—Ö"""
    web_dev_id = await conn.fetchval('''
        INSERT INTO services (name, description)
        VALUES ($1, $2)
        RETURNING service_id
    ''', "üåê –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏ —Å–∞–π—Ç–æ–≤")

    mobile_dev_id = await conn.fetchval('''
        INSERT INTO services (name, description)
        VALUES ($1, $2)
        RETURNING service_id
    ''', "üì± –ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è iOS –∏ Android")

    # –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    await conn.execute('''
        INSERT INTO service_options (service_id, name, description, price)
        VALUES ($1, $2, $3, $4)
    ''', web_dev_id, "–õ–µ–Ω–¥–∏–Ω–≥",
       "‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω\n‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM\n‚Ä¢ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è\n‚Ä¢ –°—Ä–æ–∫: 5-10 –¥–Ω–µ–π",
       "–æ—Ç 30 000‚ÇΩ")

    await conn.execute('''
        INSERT INTO service_options (service_id, name, description, price)
        VALUES ($1, $2, $3, $4)
    ''', web_dev_id, "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç",
       "‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω\n‚Ä¢ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n‚Ä¢ –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å\n‚Ä¢ –°—Ä–æ–∫: 2-3 –Ω–µ–¥–µ–ª–∏",
       "–æ—Ç 80 000‚ÇΩ")

    await conn.execute('''
        INSERT INTO service_options (service_id, name, description, price)
        VALUES ($1, $2, $3, $4)
    ''', web_dev_id, "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω",
       "‚Ä¢ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤\n‚Ä¢ –ö–æ—Ä–∑–∏–Ω–∞ –∏ –æ–ø–ª–∞—Ç–∞\n‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å 1–°\n‚Ä¢ –°—Ä–æ–∫: 3-4 –Ω–µ–¥–µ–ª–∏",
       "–æ—Ç 150 000‚ÇΩ")

    # –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    await conn.execute('''
        INSERT INTO service_options (service_id, name, description, price)
        VALUES ($1, $2, $3, $4)
    ''', mobile_dev_id, "–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
       "‚Ä¢ –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–µ\n‚Ä¢ –ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª\n‚Ä¢ –°—Ä–æ–∫: 3-4 –Ω–µ–¥–µ–ª–∏",
       "–æ—Ç 120 000‚ÇΩ")

    await conn.execute('''
        INSERT INTO service_options (service_id, name, description, price)
        VALUES ($1, $2, $3, $4)
    ''', mobile_dev_id, "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏",
       "‚Ä¢ –ù–∞—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω\n‚Ä¢ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n‚Ä¢ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n‚Ä¢ –°—Ä–æ–∫: 6-8 –Ω–µ–¥–µ–ª–∏",
       "–æ—Ç 250 000‚ÇΩ")

    await conn.execute('''
        INSERT INTO service_options (service_id, name, description, price)
        VALUES ($1, $2, $3, $4)
    ''', mobile_dev_id, "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
       "‚Ä¢ –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –±—ç–∫–µ–Ω–¥\n‚Ä¢ –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞\n‚Ä¢ –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞\n‚Ä¢ –°—Ä–æ–∫: 3-6 –º–µ—Å—è—Ü–µ–≤",
       "–æ—Ç 500 000‚ÇΩ")

async def init_faq_data(conn):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FAQ"""
    await conn.execute('''
        INSERT INTO faq (question, answer)
        VALUES ($1, $2)
    ''', "–ß—Ç–æ —Ç–∞–∫–æ–µ IT-–∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥?",
       "IT-–∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥ ‚Äî —ç—Ç–æ –ø–µ—Ä–µ–¥–∞—á–∞ –∑–∞–¥–∞—á –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ IT-—Ä–µ—à–µ–Ω–∏–π –≤–Ω–µ—à–Ω–µ–π –∫–æ–º–∞–Ω–¥–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤. "
       "–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π IT-–æ—Ç–¥–µ–ª.")

    await conn.execute('''
        INSERT INTO faq (question, answer)
        VALUES ($1, $2)
    ''', "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥–∞",
       "‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞—Ö –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏\n"
       "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–ø–µ—Ä—Ç–∞–º —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏\n"
       "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
       "‚Ä¢ –ì–∏–±–∫–æ—Å—Ç—å –≤ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏\n"
       "‚Ä¢ –ü—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ —Ä–∞—Å—Ö–æ–¥—ã")

    await conn.execute('''
        INSERT INTO faq (question, answer)
        VALUES ($1, $2)
    ''', "–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?",
       "1. –û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'\n"
       "2. –ú—ã –æ—Ü–µ–Ω–∏–º –∑–∞–¥–∞—á—É –∏ –ø—Ä–µ–¥–ª–æ–∂–∏–º —Ä–µ—à–µ–Ω–∏–µ\n"
       "3. –ó–∞–∫–ª—é—á–∏–º –¥–æ–≥–æ–≤–æ—Ä –∏ –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Ä–∞–±–æ—Ç–µ\n"
       "4. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –≤ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏")

# ================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–î ==================
async def clear_all_requests():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    async with db_pool.acquire() as conn:
        await conn.execute("DELETE FROM requests")
        logger.info("–í—Å–µ –∑–∞—è–≤–∫–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

async def delete_request(request_id: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏"""
    async with db_pool.acquire() as conn:
        deleted = await conn.execute("DELETE FROM requests WHERE request_id = $1", request_id)
    return int(deleted.split()[-1]) > 0

async def delete_user(user_id: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Å–µ—Ö –µ–≥–æ –∑–∞—è–≤–æ–∫"""
    async with db_pool.acquire() as conn:
        deleted = await conn.execute("DELETE FROM users WHERE user_id = $1", user_id)
    return int(deleted.split()[-1]) > 0

async def delete_service(service_id: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–µ–π –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
    async with db_pool.acquire() as conn:
        deleted = await conn.execute("DELETE FROM services WHERE service_id = $1", service_id)
    return int(deleted.split()[-1]) > 0

async def delete_faq(faq_id: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ FAQ"""
    async with db_pool.acquire() as conn:
        deleted = await conn.execute("DELETE FROM faq WHERE faq_id = $1", faq_id)
    return int(deleted.split()[-1]) > 0

async def get_all_requests():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫"""
    async with db_pool.acquire() as conn:
        return await conn.fetch("SELECT * FROM requests ORDER BY request_date DESC")

async def get_all_users():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    async with db_pool.acquire() as conn:
        return await conn.fetch("SELECT * FROM users ORDER BY registration_date DESC")

async def get_all_services():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Å–ª—É–≥"""
    async with db_pool.acquire() as conn:
        return await conn.fetch("SELECT * FROM services")

async def get_all_faq():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ FAQ"""
    async with db_pool.acquire() as conn:
        return await conn.fetch("SELECT * FROM faq")

async def clear_all_requests():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    async with db_pool.acquire() as conn:
        await conn.execute("DELETE FROM requests")
        logger.info("–í—Å–µ –∑–∞—è–≤–∫–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")


async def register_user(user_id: int, username: str, full_name: str):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with db_pool.acquire() as conn:
        await conn.execute('''
            INSERT INTO users (user_id, username, full_name)
            VALUES ($1, $2, $3)
            ON CONFLICT (user_id) 
            DO UPDATE SET last_activity = NOW(), username = EXCLUDED.username, full_name = EXCLUDED.full_name
        ''', user_id, username, full_name)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω")

async def create_request(user_id: int, request_text: str, service_option_id: int = None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏"""
    async with db_pool.acquire() as conn:
        await conn.execute('''
            INSERT INTO requests (user_id, request_text, service_option_id)
            VALUES ($1, $2, $3)
        ''', user_id, request_text, service_option_id)
        request_id = await conn.fetchval("SELECT lastval()")
    return request_id

async def get_services():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥"""
    async with db_pool.acquire() as conn:
        return await conn.fetch("SELECT * FROM services")

async def get_service_options(service_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —É—Å–ª—É–≥–∏"""
    async with db_pool.acquire() as conn:
        return await conn.fetch('''
            SELECT * FROM service_options 
            WHERE service_id = $1
        ''', service_id)

async def get_faq_questions():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ FAQ"""
    async with db_pool.acquire() as conn:
        return await conn.fetch("SELECT question FROM faq")

async def get_faq_answer(question: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å FAQ"""
    async with db_pool.acquire() as conn:
        return await conn.fetchval('''
            SELECT answer FROM faq 
            WHERE question = $1
        ''', question)

# ================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==================

def get_main_kb():
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text="üö® IT-–ê—É—Ç—Å–æ—Ä—Å–∏–Ω–≥"),
        KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"),
        KeyboardButton(text="‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
    )
    builder.row(
        KeyboardButton(text="üì® –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
    )
    return builder.as_markup(resize_keyboard=True)

def get_back_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )

def get_outsource_kb():
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text="üåê –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"),
        KeyboardButton(text="üì± –ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    )
    builder.row(
        KeyboardButton(text="üîô –ù–∞–∑–∞–¥")
    )
    return builder.as_markup(resize_keyboard=True)

def get_help_kb():
    builder = ReplyKeyboardBuilder()
    questions = dp["faq_questions"]  # –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    for question in questions[:2]:
        builder.add(KeyboardButton(text=question["question"]))
    builder.row(
        KeyboardButton(text="–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?"),
        KeyboardButton(text="üîô –ù–∞–∑–∞–¥")
    )
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


ADMIN_IDS = {}  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    text = (
        "üë®‚Äçüíª <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n" 
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/requests - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫\n"
        "/users - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/services - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —É—Å–ª—É–≥\n"
        "/faq - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ FAQ\n\n"
        "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "/delete_request [id] - –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É\n"
        "/delete_user [id] - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/delete_service [id] - –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É\n"
        "/delete_faq [id] - –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å FAQ\n\n"
        "/clear_requests - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏"
    )
    await message.answer(text, parse_mode="HTML")

@dp.message(Command("requests"))
async def show_requests(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    requests = await get_all_requests()
    if not requests:
        await message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    text = "üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:</b>\n\n"
    for req in requests:
        text += (
            f"ID: {req['request_id']}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {req['user_id']}\n"
            f"–î–∞—Ç–∞: {req['request_date'].strftime('%Y-%m-%d %H:%M')}\n"
            f"–°—Ç–∞—Ç—É—Å: {req['status']}\n"
            f"–¢–µ–∫—Å—Ç: {req['request_text'][:50]}...\n\n"
        )
    
    await message.answer(text, parse_mode="HTML")

@dp.message(Command("users"))
async def show_users(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    users = await get_all_users()
    if not users:
        await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    for user in users:
        text += (
            f"ID: {user['user_id']}\n"
            f"–ò–º—è: {user['full_name']}\n"
            f"Username: @{user['username']}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user['registration_date'].strftime('%Y-%m-%d')}\n\n"
        )
    
    await message.answer(text, parse_mode="HTML")

@dp.message(Command("services"))
async def show_services(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    services = await get_all_services()
    if not services:
        await message.answer("–ù–µ—Ç —É—Å–ª—É–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    text = "üõ† <b>–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥:</b>\n\n"
    for service in services:
        text += (
            f"ID: {service['service_id']}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {service['name']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {service['description'][:50]}...\n\n"
        )
    
    await message.answer(text, parse_mode="HTML")

@dp.message(Command("faq"))
async def show_faq(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    faqs = await get_all_faq()
    if not faqs:
        await message.answer("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ FAQ")
        return
    
    text = "‚ùì <b>–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ FAQ:</b>\n\n"
    for faq in faqs:
        text += (
            f"ID: {faq['faq_id']}\n"
            f"–í–æ–ø—Ä–æ—Å: {faq['question']}\n"
            f"–û—Ç–≤–µ—Ç: {faq['answer'][:50]}...\n\n"
        )
    
    await message.answer(text, parse_mode="HTML")

@dp.message(Command("delete_request"))
async def delete_request_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        request_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_request [id]")
        return
    
    if await delete_request(request_id):
        await message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} —É–¥–∞–ª–µ–Ω–∞")
    else:
        await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

@dp.message(Command("delete_user"))
async def delete_user_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        user_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_user [id]")
        return
    
    if await delete_user(user_id):
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user_id} —É–¥–∞–ª–µ–Ω")
    else:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

@dp.message(Command("delete_service"))
async def delete_service_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        service_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_service [id]")
        return
    
    if await delete_service(service_id):
        await message.answer(f"‚úÖ –£—Å–ª—É–≥–∞ #{service_id} —É–¥–∞–ª–µ–Ω–∞")
    else:
        await message.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

@dp.message(Command("delete_faq"))
async def delete_faq_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        faq_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_faq [id]")
        return
    
    if await delete_faq(faq_id):
        await message.answer(f"‚úÖ –í–æ–ø—Ä–æ—Å FAQ #{faq_id} —É–¥–∞–ª–µ–Ω")
    else:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")

@dp.message(Command("clear_requests"))
async def clear_requests_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await clear_all_requests()
    await message.answer("‚úÖ –í—Å–µ –∑–∞—è–≤–∫–∏ —É–¥–∞–ª–µ–Ω—ã")


# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ==================

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await register_user(
        user_id=message.from_user.id,
        username=message.from_user.username,
        full_name=message.from_user.full_name
    )
    try:
        await message.answer_photo(
            photo=START_IMAGE_URL,
            caption="üõ† <b>IT-–ê—É—Ç—Å–æ—Ä—Å–∏–Ω–≥ PRO</b>\n\n"
                    "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–± –∏ –º–æ–±–∏–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:",
            parse_mode="HTML",
            reply_markup=get_main_kb()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.answer(
            "üõ† <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IT-–ê—É—Ç—Å–æ—Ä—Å–∏–Ω–≥ PRO</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=get_main_kb()
        )

@dp.message(F.text == "üö® IT-–ê—É—Ç—Å–æ—Ä—Å–∏–Ω–≥")
async def outsource_menu(message: types.Message):
    await message.answer(
        "üñ• <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –≤–∞—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_outsource_kb()
    )


@dp.message(Command("clear_db"))
async def clear_db_command(message: types.Message):
    if message.from_user.id == 1072196801:  
        await clear_all_requests()
        await message.answer("‚úÖ –í—Å–µ –∑–∞—è–≤–∫–∏ —É–¥–∞–ª–µ–Ω—ã")
    else:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –æ–ø–µ—Ä–∞—Ü–∏—é")    

@dp.message(F.text.in_(["üåê –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "üì± –ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"]))
async def service_menu_handler(message: types.Message):
    services = await get_services()
    service = next((s for s in services if s["name"] == message.text), None)
    if not service:
        await message.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    options = await get_service_options(service["service_id"])
    builder = ReplyKeyboardBuilder()
    for option in options:
        builder.add(KeyboardButton(text=option["name"]))
    builder.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    builder.adjust(1)

    await message.answer(
        f"<b>{service['name']}</b>\n\n{service['description']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:",
        parse_mode="HTML",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

@dp.message(F.text == "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
async def help_handler(message: types.Message):
    await message.answer(
        "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:",
        parse_mode="HTML",
        reply_markup=get_help_kb()
    )


@dp.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts_handler(message: types.Message):
    await message.answer(
        "üìû <b>–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +7 (912) 345-67-89\n"
        "Email: it-aytsors@gmail.com\n"
        "Telegram: @it_outsourcing_support\n\n"
        "–†–∞–±–æ—Ç–∞–µ–º —Å 9:00 –¥–æ 18:00 –ø–æ –ú–°–ö",
        parse_mode="HTML",
        reply_markup=get_back_kb()
    )


@dp.message(F.text == "üì® –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def create_request_handler(message: types.Message):
    await message.answer(
        "‚úçÔ∏è <b>–û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç:</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n"
        "1. –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ (–≤–µ–±/–º–æ–±–∏–ª—å–Ω–æ–µ)\n"
        "2. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n"
        "3. –ñ–µ–ª–∞–µ–º—ã–µ —Å—Ä–æ–∫–∏\n"
        "4. –ë—é–¥–∂–µ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)\n\n"
        "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
        parse_mode="HTML",
        reply_markup=get_back_kb()
    )

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_handler(message: types.Message):
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_kb()
    )

@dp.message()
async def process_any_message(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–º –∏–∑ FAQ
    faq_answer = await get_faq_answer(message.text)
    if faq_answer:
        await message.answer(
            f"<b>{message.text}</b>\n\n{faq_answer}",
            parse_mode="HTML",
            reply_markup=get_help_kb()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–º —É—Å–ª—É–≥–∏
    async with db_pool.acquire() as conn:
        option = await conn.fetchrow('''
            SELECT so.*, s.name as service_name 
            FROM service_options so
            JOIN services s ON so.service_id = s.service_id
            WHERE so.name = $1
        ''', message.text)

    if option:
        await message.answer(
            f"<b>{option['name']}</b>\n\n"
            f"{option['description']}\n\n"
            f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {option['price']}\n\n"
            "‚úçÔ∏è –î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É' –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ:\n"
            "1. –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞\n2. –ñ–µ–ª–∞–µ–º—ã–µ —Å—Ä–æ–∫–∏\n3. –ë—é–¥–∂–µ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)",
            parse_mode="HTML",
            reply_markup=get_back_kb()
        )
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç, —Å—á–∏—Ç–∞–µ–º –∑–∞—è–≤–∫–æ–π
    request_id = await create_request(
        user_id=message.from_user.id,
        request_text=message.text
    )

    await message.answer(
        "‚úÖ <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –∫–∞–∫ –∑–∞—è–≤–∫–∞!</b>\n\n"
        f"–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #{request_id}\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
        parse_mode="HTML",
        reply_markup=get_main_kb()
    )

# ================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==================

async def on_startup():
    global db_pool
    db_pool = await create_db_pool()
    await init_db(db_pool)
    dp["faq_questions"] = await get_faq_questions()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

async def on_shutdown():
    await db_pool.close()
    await bot.close()
    logger.info("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç –∏ –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")